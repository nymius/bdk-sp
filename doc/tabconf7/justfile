set quiet

bdk_data_dir := env('BDK_DATA_DIR')
ext_descriptor := env('EXT_DESCRIPTOR')
int_descriptor := env('INT_DESCRIPTOR')
bitcoin_data_dir := env('BITCOIN_DATA_DIR')

[doc("List all available commands.")]
default:
  just --list --unsorted

[group("Podman")]
[doc("Set up VM to run containers.")]
machine FORCE="false":
  #!/usr/bin/env bash
  machine_created=$(podman machine list --format json | jq -r 'map(.Name) | any(contains("sp_tabconf7"))')
  if [ "$machine_created" = "true" ] && [ "{{FORCE}}" = "true" ]; then
    echo "Machine already created, removing forcefully"
    podman machine rm -f sp_tabconf7
  elif [ "$machine_created" = "true" ]; then
    echo "Machine already created."
  else
    podman machine init --cpus 4 --memory 4096 --disk-size 20 sp_tabconf7
  fi

  just startvm

[group("Podman")]
[doc("Build test node images.")]
build TAG="1.0.0" VERSION="29.0" RELEASE="29.0" ARCH="x86_64-linux-gnu": machine
  #!/usr/bin/env bash
  # Create virtual Containerfile by storing content in file descriptor 3
  exec 3<<- "EOF"
    FROM debian:trixie AS debian-builder

    # Install wget dependency
    RUN apt-get update && apt-get install -y wget

    # Setup bitcoin core binaries download
    ARG BITCOIN_VERSION=26.0
    ARG RELEASE=$BITCOIN_VERSION
    ARG TARGET_ARCH=aarch64
    ENV BITCOIN_TARBALL=bitcoin-${BITCOIN_VERSION}-${TARGET_ARCH}.tar.gz
    ENV BITCOIN_URL=https://bitcoincore.org/bin/bitcoin-core-${RELEASE}/${BITCOIN_TARBALL}

    # Install bitcoin core
    WORKDIR /
    RUN mkdir -p /bitcoin
    RUN wget -qO- ${BITCOIN_URL} | tar -xzvf - -C /bitcoin

    FROM rust:trixie AS base
    RUN cargo install sccache --locked
    ENV RUSTC_WRAPPER=sccache SCCACHE_DIR=/sccache
    # Install dependencies for Esplora
    RUN apt-get update && apt-get install -y \
        curl \
        git \
        build-essential \
        pkg-config \
        libssl-dev \
        libclang-dev \
        netcat-openbsd \
        nano \
        && rm -rf /var/lib/apt/lists/*

    FROM base AS rust-builder

    # Create directory for building
    RUN mkdir -p /build

    # Build Esplora and Electrum services
    RUN mkdir -p /electrs
    WORKDIR /electrs
    RUN git clone https://github.com/Blockstream/electrs.git .
    RUN git checkout new-index
    # Remove directories at the end to create smaller images
    RUN --mount=type=cache,target=$SCCACHE_DIR,sharing=locked cargo build --release --bin electrs
    RUN cp target/release/electrs /build
    RUN rm -rf /electrs

    # Build Fast Bitcoin Block Explorer
    RUN mkdir -p /fbbe
    WORKDIR /fbbe
    RUN git clone https://github.com/RCasatta/fbbe .
    # Remove directories at the end to create smaller images
    RUN --mount=type=cache,target=$SCCACHE_DIR,sharing=locked cargo build --release --bin fbbe
    RUN cp target/release/fbbe /build
    RUN rm -rf /fbbe

    FROM golang:trixie as go-builder
    RUN apt-get update && apt-get install wget
    RUN mkdir -p /blindbit
    RUN mkdir -p /build
    WORKDIR /blindbit
    RUN wget -qO- https://github.com/setavenger/blindbit-oracle/archive/refs/tags/indexes-stable.tar.gz | tar -xzvf - --strip-components=1
    RUN go mod download
    RUN env CGO_ENABLED=0 go build -o /build/blindbit ./src

    FROM debian:trixie
    RUN apt-get update && apt-get install -y libssl3
    ARG BITCOIN_VERSION=26.0
    COPY --from=rust-builder /build/electrs /usr/local/bin
    COPY --from=rust-builder /build/fbbe /usr/local/bin
    COPY --from=go-builder build/blindbit /usr/local/bin
    COPY --from=debian-builder /bitcoin/bitcoin-${BITCOIN_VERSION}/bin/bitcoin-util /usr/local/bin
    COPY --from=debian-builder /bitcoin/bitcoin-${BITCOIN_VERSION}/bin/bitcoin-cli /usr/local/bin
    COPY --from=debian-builder /bitcoin/bitcoin-${BITCOIN_VERSION}/bin/bitcoin-tx /usr/local/bin
    COPY --from=debian-builder /bitcoin/bitcoin-${BITCOIN_VERSION}/bin/bitcoin-wallet /usr/local/bin
    COPY --from=debian-builder /bitcoin/bitcoin-${BITCOIN_VERSION}/bin/bitcoind /usr/local/bin
    COPY --from=debian-builder /bitcoin/bitcoin-${BITCOIN_VERSION}/bin/test_bitcoin /usr/local/bin

    WORKDIR /home
    ENTRYPOINT ["tail", "-f", "/dev/null"]
  EOF

  image_exists=$(podman --connection sp_tabconf7 images --noheading -f reference=localhost/regtest:1.0.0 --format 'table \{\{.ID\}\}')
  if [[ $image_exists ]]; then
    echo "Image already built."
    exit
  else
    cat <&3 | podman --connection sp_tabconf7 build --build-arg BITCOIN_VERSION={{VERSION}} --build-arg RELEASE={{RELEASE}} --build-arg TARGET_ARCH={{ARCH}} --tag localhost/regtest:{{TAG}} -f -
  fi


[group("Podman")]
[doc("Create container running test node in allocated VM.")]
create FORCE="false" TAG="1.0.0" NAME="RegtestBitcoinEnv": (build TAG)
  #!/usr/bin/env bash
  container_exists=$(podman --connection sp_tabconf7 ps --all --format json | jq -r '.[] | select(.Names[] | contains("RegtestBitcoinEnv")) | .Id')
  if [[ $container_exists ]] && [ "{{FORCE}}" = "false" ]; then
    echo "Container already exists."
    exit
  elif [[ $container_exists ]] && [ "{{FORCE}}" = "true" ]; then
    podman --connection sp_tabconf7 rm -f $container_exists
  fi

    podman --connection sp_tabconf7 create --name {{NAME}} --publish 18443:18443 --publish 18444:18444 --publish 3002:3002 --publish 3003:3003 --publish 3004:3004 --publish 60401:60401 localhost/regtest:{{TAG}}

[group("Podman")]
[doc("Start your podman machine.")]
startvm:
  #!/usr/bin/env bash
  machine_running=$(podman machine list --format json | jq -r '.[] | select(.Name | contains("sp_tabconf7")) | .Running')
  if [ "$machine_running" = "false" ]; then
    podman machine start sp_tabconf7 | tail -n1
  else
    echo "Machine is already running."
  fi

[group("Podman")]
[doc("Start your podman machine and regtest environment.")]
startcontainer: (create "false" "1.0.0")
  #!/usr/bin/env bash
  container_state=$(podman --connection sp_tabconf7 ps --format json | jq -r '.[] | select(.Names[] | contains("RegtestBitcoinEnv")) | .State')
  if [ "$container_state" = "running" ]; then
    echo "Container is running"
    exit
  fi
  podman --connection sp_tabconf7 start RegtestBitcoinEnv

[group("Podman")]
[doc("Stop your podman machine and running environment.")]
stop:
  #!/usr/bin/env bash
  echo "Stopping container"

  machine_running=$(podman machine list --format json | jq -r '.[] | select(.Name | contains("sp_tabconf7")) | .Running')
  if [ "$machine_running" = "false" ]; then
    echo "Machine is not running."
    exit
  fi

  container_state=$(podman --connection sp_tabconf7 ps --format json | jq -r '.[] | select(.Names[] | contains("RegtestBitcoinEnv")) | .State')
  if [ "$container_state" != "running" ]; then
    echo "Container is not running"
  else
    just cli stop
    if just podcmd '[ -d /tmp/testenv ]'; then
      just podcmd "rm -rf .bdk_*"
      just podcmd "rm -rf /tmp/testenv"
    fi
    podman --connection sp_tabconf7 stop RegtestBitcoinEnv
  fi

  podman machine stop sp_tabconf7

[group("Podman")]
[doc("Launch ephemeral environment")]
start STATE="persistent":
  #!/usr/bin/env bash
  trap "just stop" SIGHUP SIGINT SIGQUIT SIGTERM
  just startcontainer

  ENVDIR="/root/env"
  if [ "{{STATE}}" = "ephemeral" ]; then
    ENVDIR="/tmp/testenv"
  fi
  LOGDIR="$ENVDIR/log"

  logdir=$(just podcmd "if [ ! -d $LOGDIR ]; then echo 'true'; fi")
  if [ "$logdir" = "true" ]; then
    # Create the log directory
    just podcmd "mkdir -p $LOGDIR"
  fi

  BLINDBIT_DIR="$ENVDIR/blindbit"

  BITCOIND_LOG="$LOGDIR/bitcoin.log"
  BLINDBIT_LOG="$LOGDIR/blindbit.log"
  ESPLORA_LOG="$LOGDIR/esplora.log"
  FBBE_LOG="$LOGDIR/fbbe.log"

  # Start the bitcoin daemon
  just podcmd "bitcoind --daemonwait --datadir=$ENVDIR --chain=regtest --txindex --blockfilterindex --peerblockfilters --rpcbind=0.0.0.0 --rpcallowip=0.0.0.0/0 --rpcport=18443 --rest -debuglogfile=$BITCOIND_LOG 2>&1"

  # Start the blockchain explorer
  just podcmd "fbbe --network regtest --local-addr 0.0.0.0:3003 >> $FBBE_LOG 2>&1 &"

  # Start the Esplora and Electrum services
  just podcmd "electrs -vvvv --daemon-dir $ENVDIR --db-dir $ENVDIR --http-addr 0.0.0.0:3002 --electrum-rpc-addr 0.0.0.0:60401 --network=regtest --lightmode >> $ESPLORA_LOG 2>&1 &"

  # Create Blindbit oracle config
  just podcmd "mkdir -p $BLINDBIT_DIR"
  podman --connection sp_tabconf7 exec -i RegtestBitcoinEnv /bin/bash -c "cat > $BLINDBIT_DIR/blindbit.toml" <<- EOF
    # access from container host
    host = "0.0.0.0:3004"
    chain = "regtest"
    rpc_endpoint = "http://127.0.0.1:18443"
    cookie_path = "$ENVDIR/regtest/.cookie"
    rpc_pass = ""
    rpc_user = ""
    sync_start_height = 1
    max_parallel_tweak_computations = 4
    max_parallel_requests = 4
    tweaks_only = 0
    tweaks_full_basic = 1
    tweaks_full_with_dust_filter = 0
    tweaks_cut_through_with_dust_filter = 0
  EOF

  just podcmd "blindbit --datadir $BLINDBIT_DIR >> $BLINDBIT_LOG 2>&1 &"

  just mine 1

[group("Podman")]
[doc("Get path to services state directory")]
envpath:
  #!/usr/bin/env bash
  ENVDIR="/tmp/testenv"
  testenv=$(just podcmd "if [ -d $ENVDIR ]; then echo 'true'; fi")
  if [ "$testenv" = "true" ]; then
    echo $ENVDIR
  else
    echo "/root/env"
  fi

[group("Bitcoin Core")]
[doc("Print the current session cookie to console.")]
cookie:
  just podcmd "cat $(just envpath)/regtest/.cookie | cut -d ':' -f2"

[group("Bitcoin Core")]
[doc("Mine a block, or mine <BLOCKS> number of blocks.")]
mine BLOCKS="1" ADDRESS="bcrt1q6gau5mg4ceupfhtyywyaj5ge45vgptvawgg3aq":
  just cli generatetoaddress {{BLOCKS}} {{ADDRESS}}
  just waitesplora

[group("Bitcoin Core")]
[doc("Send mining reward to <ADDRESS>")]
sendminingrewardto ADDRESS:
  just cli generatetoaddress 1 {{ADDRESS}}

[group("Bitcoin Core")]
[doc("Send a command to bitcoin-cli")]
[positional-arguments]
cli COMMAND *ARGS:
  #!/usr/bin/env bash
  touch /tmp/empty.conf
  bitcoin-cli --conf=/tmp/empty.conf -rpcconnect=127.0.0.1 -rpcport=18443 --chain=regtest --rpcuser=__cookie__ --rpcpassword=$(just cookie) {{COMMAND}} {{ARGS}}

[group("Logs")]
[doc("Print all logs to console.")]
logs:
  podman --connection sp_tabconf7 logs RegtestBitcoinEnv

[group("Logs")]
[doc("Print bitcoin daemon logs to console.")]
bitcoindlogs:
  just podcmd "tail -f $(just envpath)/log/bitcoin.log"

[group("Logs")]
[doc("Print Esplora logs to console.")]
esploralogs:
  just podcmd "tail -f $(just envpath)/log/esplora.log"

[group("Logs")]
[doc("Print block explorer logs to console.")]
explorerlogs:
  just podcmd "tail -f $(just envpath)/log/fbbe.log"

[group("Logs")]
[doc("Print blindbit logs to console.")]
blindbitlogs:
  just podcmd "tail -f $(just envpath)/log/blindbit.log"

[group("Esplora")]
[doc("Wait for esplora to update changes in blockchain")]
waitesplora:
  just podcmd "tail -n 2 --pid=\$\$ -f $(just envpath)/log/esplora.log | grep -m 1 -E 'DEBUG applying [0-9]+ new headers from height [0-9]+'" >/dev/null 2>&1

[group("Podman")]
[doc("Enter the shell in the pod.")]
podshell:
  podman --connection sp_tabconf7 exec -it RegtestBitcoinEnv /bin/bash

[group("Podman")]
[doc("Execute command inside pod.")]
[no-exit-message]
podcmd *ARGS="":
  #!/usr/bin/env bash
  containers_running=$(podman machine ls --format json | jq -r .[0].Running)
  if [ "$containers_running" = "false" ]; then
    echo "Container is not running"
  else
    podman --connection sp_tabconf7 exec RegtestBitcoinEnv /bin/bash -c '{{ARGS}}'
  fi

[group("Podman")]
[doc("Open the block explorer.")]
explorer:
  open http://127.0.0.1:3003

[group("Docs")]
[doc("Serve the local docs.")]
servedocs:
  mkdocs serve

[group("Docs")]
[doc("Open the website for docs.")]
docs:
  open https://thunderbiscuit.github.io/regtest-in-a-pod/

[group("Default Wallet")]
[doc("Create a default wallet.")]
createwallet:
  just cli createwallet podmanwallet
  just cli -rpcwallet=podmanwallet settxfee 0.0001

[group("Default Wallet")]
[doc("Print an address from the default wallet.")]
newaddress:
  just cli -rpcwallet=podmanwallet getnewaddress

[group("Default Wallet")]
[doc("Print the balance of the default wallet.")]
walletbalance:
  just cli -rpcwallet=podmanwallet getbalance

[group("Default Wallet")]
[doc("Send 1 bitcoin to <ADDRESS> using the default wallet.")]
sendto ADDRESS:
  just cli -rpcwallet=podmanwallet sendtoaddress {{ADDRESS}} 1

[group("Silent payment wallet")]
[doc("Send a command to sp-cli2 on regtest")]
[positional-arguments]
regtest-sp COMMAND *ARGS:
  #!/usr/bin/env bash
  export DB_PATH=".sp_cli2_regtest.db"
  sp-cli2 {{COMMAND}} {{ARGS}}

[group("Silent payment wallet")]
[doc("Send a command to sp-cli2 on regtest")]
[positional-arguments]
regtest-bdk COMMAND *ARGS:
  #!/usr/bin/env bash
  bdk-cli --datadir "{{bdk_data_dir}}" --network regtest wallet -w regtest -e "{{ext_descriptor}}" -i "{{int_descriptor}}" -c rpc -u http://localhost:18443/ "{{bitcoin_data_dir}}/regtest/.cookie" -d sqlite {{COMMAND}} {{ARGS}}
